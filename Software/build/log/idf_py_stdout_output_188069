[1/10] Performing build step for 'bootloader'
[1/1] cd /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/bootloader/esp-idf/esptool_py && /home/trngzng/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/trngzng/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/bootloader/bootloader.bin
Bootloader binary size 0x6730 bytes. 0x8d0 bytes (8%) free.
[2/8] cd /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build && /home/trngzng/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/trngzng/esp/esp-idf/components/spiffs/spiffsgen.py 0xf0000 /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/font /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/storage.bin --page-size=256 --obj-name-len=32 --meta-len=4 --use-magic --use-magic-len
[3/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[4/8] Linking C static library esp-idf/main/libmain.a
[5/8] Generating ld/sections.ld
[6/8] Linking CXX executable software.elf
[7/8] Generating binary image from built executable
esptool.py v4.5.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/software.bin
[8/8] cd /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/esp-idf/esptool_py && /home/trngzng/.espressif/python_env/idf5.1_py3.10_env/bin/python /home/trngzng/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/partition_table/partition-table.bin /media/trngzng/Windows/Data/Projects/TFT-DIGITAL-CLOCK-ESP32/Software/build/software.bin
software.bin binary size 0x43e80 bytes. Smallest app partition is 0x100000 bytes. 0xbc180 bytes (73%) free.
